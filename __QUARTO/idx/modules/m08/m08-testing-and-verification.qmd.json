{"title":"Testing and Verification","markdown":{"headingText":"Testing and Verification","containsRefs":false,"markdown":"\n\n## When Code Breaks\n\nIn this module, we learn about how to deal with broken code.\n\n- By \"broken code,\" we mean everything from code that does not run to code that does not meet the purpose for writing the code.\n\nThis is a broad topic that covers many levels, facets, and many approaches.\n\nThese are some basic questions that define the space of the topic:\n\n- What constitutes broken code?\n\n- How do you prevent your code from breaking?\n\n- How to tell if your code is broken?\n\nWe'll try to cover this space, and introduce you to some Python tools designed to handle broken code.\n\n## Specifications\n\nOne way to frame this topic is to think in terms of **standards of code** against which the concept of broken code makes sense.\n\nThis perspective begins with the concept of a **specification**: A precise and detailed statement that a stakeholder defines about the properties the code must have.\n\nThere are different kinds of specification, or \"spec\". For example:\n                                                           \n- A **design specification** specification provides exact instructions for _how_ to build something.\n                                                                      \n- A **requirements specification** provides exact statements about _what_ should be built.\n\nCode can meet specifications in different ways. \n\n- We can think of code **quality** in terms of the degree to which code meets requirements. \n\n- **Quality:** falls on a scale; it's not a black-and-white idea. Defining the scale can be difficult.\n\nTwo kinds of requirements matching are the following:\n\n- **Verification:**  Shows that the code **meets the requirement specification**. You verify that I wrote the program you asked me to write.\n\n- **Validation:**  Shows that the code meets the requirements. You show that the program is a valid solution to the user's problem, but not necessarily the best.\n\n**Specifications are very important**. Not only are they used to guide the creation of the project, but also they're **vital for program testing and verification**. \n\n- That is, if you don't have specifications for the product, you cannot verify that you're doing the right thing. \n\n- Likewise, if behavior is not defined, then it becomes difficult to know what is *incorrect* behavior.\n\n\n::: {.callout-note}\n\nSpecifications are rarely perfect. They can change over time for a variety of reasons. \n\nIn fact, some have joked that programming is the act of [\"debugging the spec\"](http://johnunsworth.name/KR/halsted.html). We'll learn more about this when we cover project management.\n\n:::\n\n## Testing and Verification\n\nTo ensure that our code aligns with our requirements and is of the highest quality we can provide, we follow testing and verification processes.\n\n## Formal Verification\n\nFormal verification involves proof. There are three types:\n\n-   Hand-written, hand-checked\n\n-   Hand-written, machine-checked (proof-carrying code)\n\n-   Machine-written, machine-checked (static analysis)\n\nNone of them are very widely used yet, but the latter two are increasing in popularity. \n\nFormal verification is complex, difficult, and takes a great deal of effort.\n\n## Empirical Testing\n\nInstead of formal verification, correctness is demonstrated through empirical testing. Empirical testing shows it works on several inputs. In general, testing is:\n\n-   A lot easier than proof\n\n-   A lot harder (and more involved) than writing code \n\nThere are many kinds of testing, but we will focus on **unit testing** in this module. \n\n- **Unit Testing** is where we write code that tests the **smallest possible units** of the spec (must attempt to test every flow path). The programmer does unit testing as part of the coding process.\n\n- This assumes that code is componential, i.e. that the smallest units are functionally independent and can be combined in principled ways.\n\n- This raises the issue of writing well-designed functions and classes.\n\nTwo other kinds of testing are **integration** and **acceptance** (beta) testing, which are out of the scope of this lesson. See below for a short description.\n\n- **Integration Testing:** Test that units work together.\n\n- **Acceptance Testing (Beta Testing):** Give product to real users to try it out.\n\n## Flow Paths\n\nUnit testing is predicated on understand **the flow of data** in your program.\n\nA flow path is a unique execution sequence through a program unit. \n\nA good set of test data makes sure **every possible path** is followed (tests every possible behavior). \n\nNote, however, that there are virtually an infinite number of flow paths in a program!\n\nExhaustive testing is usually impossible. \n\nHowever, we can overcome these odds by being clever about the kinds of tests that we write. \n\n<!-- We'll also learn about equivalence classes, which also help us overcome this hurdle. -->\n\n<!-- Example of code showing various flow paths. -->\n<!--\n\nFor example, starting at Stmt~1~, then the condition of the while loop (C~1~) is true, so that takes us to the condition of the if statement (C~2~) but maybe this is false, so we end up in the else portion, Stmt~3~. \n\n![](../../media/FlowPathCode.png)\n\nThis is an example of a flow path starting at Stmt~1~ and ending up at Stmt~3~. In other words, there are many paths through a given program.\n-->\n\n## Debugging\n\nAnother aspect of testing and verification which we will not cover here is debugging.\n\nDebugging -- derived from Grace Hopper's expression \"bug\" -- refers to the process of investigating precisely where and when code breaks. \n\nProgramming environments like Jupyter Lab and VS Code provide good tools for debugging.\n\n## A Note of Caution\n\n**[Edsger Dijkstra](https://en.wikipedia.org/wiki/Edsger_W._Dijkstra)** was a famous computer scientist and A. M. Turing award winner. He said:\n\n> \"Program testing can effectively show the presence of bugs but is\\\n> hopeless for showing their absence.\"\n> &nbsp;&nbsp;&nbsp;&nbsp;&mdash; Edsger Dijkstra\n\nEven if you write a test suite of carefully crafted test cases, and if they all run and pass, it doesn't mean that no further bugs exist.\n\nIt is much easier to prove the existence of something than to disprove the existence of something. \n\n**This realization should motivate us to learn how to create carefully crafted unit tests so that we can test as much as we can.**\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":true,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"number-sections":false,"output-file":"m08-testing-and-verification.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.262","bibliography":["../../refs.bib"],"_quarto-vars":{"version":2,"course_num":"DS 5100","course_title":"Programming for Data Science","academic_term":"Fall 2023","cohort_type":"Online","course_code":"DS5100-2023-08-O","course_allocation":"msds_ds5100","canvas_url":"https://canvas.its.virginia.edu/courses/75059","github_url":"https://github.com/ontoligent/DS5100-2023-08-O","website_url":"https://ontoligent.github.io/DS5100-2023-08-O","survey_form_url":"https://forms.office.com/r/YWaFPXPKz8","request_form_url":"https://forms.office.com/r/7G65N5eppk"},"theme":"cosmo","fig-cap-location":"bottom","reader-mode":false},"extensions":{"book":{"multiFile":true}}}}}