{"title":"NB: Basic File I/O","markdown":{"headingText":"NB: Basic File I/O","containsRefs":false,"markdown":"\n\n\n**Objectives**\n\n- Demonstrate use of Python's `open()` function\n- Show pattern using loops, comprehensions, and string operations to import a CSV\n- Show how to parse an imported CSV into a 2D list\n- Show how to convert a 2D list into a 2D Numpy array\n- Describe the difficulties associated with this importing CSV files using basic Python\n\n## Open Files with `open()`\n\nLet's open a sample CSV file, `biostats.csv`.\n\n* This has some biometric statistics for a group of office workers. \n* There are 18 records, recording Name, Sex, Age, Height, Weight \n* There is an initial header line.\n* This file was downloaded from https://people.sc.fsu.edu/~jburkardt/data/csv/csv.html and modified slightly.\n\nWe call the `open()` function and pass it two parameters:\n* The name of the file we want to open.\n* The mode in which the file is opened. It defaults to `r` which means open for reading in text\nmode. Other common values are:\n  * `w` for writing (truncating the file if it already exists)\n  * `x` for creating and writing to a new file \n  * `a` for appending\n\nThe returns a file object whose type depends on the mode and\nthrough which the standard file operations such as reading and writing\nare performed. So, to read from the file, you need to have specified type `r` and to write you need to have specified `w`.\n\nThe file object is an iterator.\n\nFor more info, check out [the Python docs](https://docs.python.org/3/library/functions.html#open) or run `open?` from a code cell.\n\nNote, we sometimes call the file object a file \"handle.\"\n\n`.read()` reads in the file as one long string.\n\nSince the file object is an iterator, we can't get the string again from the object.\n\nSo, let's create a new handle, read in the contents again, and then parse our string by newlines using `.split(\"\\n\")`.\n\nA short-cut to this process is to call the `.readlines()` method, which returns a pre-made list of lines.\n\nNote that the newlines are preserved in this case.\n\nFile objects should be closed when you are done with them.\n\n## Use a `with` block \n\n... to automatically open and close the file i/o object\n\nThere is a better way to handle objects that need to be closed.\n\nOther examples of such objects are database handles.\n\n`with` will automatically open and close the file handle.\n\n## Convert into a 2D list\n\nLet's covert our list of strings to a list of lists, the former being the rows of data table and the latter the cells.\n\nNote that we now have do something with the column names and handle formating and casting each cell.\n\n## Using a list comprehension\n\nWe can replace the entire code block above nested list comprehensions.\n\nRemember, you can put any expression into the first part of a comprehension, even another comprehension.\n\n## Converting to Numpy\n\nNumpy arrays must be of the same data types, and it also has no concept of column names, so we remove this row from our data.\n\nHere we demonstrate slicing along both dimensions.\n\n## Array Slices\n\n## Converting Data Types\n\nLet's try to convert the data types of the numeric columns from strings to integers. One thing we might do is the following:\n\nWe see that the strings are converted to integers.\n\nSo, let's try to save the conversion results to the original array:\n\nWhat happened?\n\n## Some Difficulties\n\nIt is pretty easy to import CSV files this way, but there are many difficulties you are likely to encounter if you use this as your default pattern for importing data. Here are just a few:\n- **Not all sources are well-formed**. They may have delimitters that are complex to parse, and the the data themselve may be hard to parse.\n- **You have to keep the column names in a separate list or vector** and then associate them with the data if and when necessary.\n- **You have to convert each column vector into its appropriate data type yourself.** Or, you have to create separate 2D arrays for each collection of columns with a common data type. This process also invovles human inspection of the file, as opposed to have a program try to figure it out for you.\n\nFor these reasons, other tools such as Pandas were created to make the work of a data scientist a bit easier and more productive.\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":true,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"number-sections":false,"output-file":"M05-01-BasicFileIO.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.262","bibliography":["../../refs.bib"],"_quarto-vars":{"version":2,"course_num":"DS 5100","course_title":"Programming for Data Science","academic_term":"Fall 2023","cohort_type":"Online","course_code":"DS5100-2023-08-O","course_allocation":"msds_ds5100","canvas_url":"https://canvas.its.virginia.edu/courses/75059","github_url":"https://github.com/ontoligent/DS5100-2023-08-O","website_url":"https://ontoligent.github.io/DS5100-2023-08-O","survey_form_url":"https://forms.office.com/r/YWaFPXPKz8","request_form_url":"https://forms.office.com/r/7G65N5eppk"},"theme":"cosmo","fig-cap-location":"bottom","reader-mode":false},"extensions":{"book":{"multiFile":true}}}}}