{"title":"NB: Exception Handling","markdown":{"headingText":"NB: Exception Handling","containsRefs":false,"markdown":"\n\n## Overview\n\n> All happy families are alike, but every unhappy family is unhappy in its own way.\\\n-- Leo Tolstoy, _Anna Karenina_, 1878.\n\nThere are two ways that programs can succeed of fail:\n\nThey can meet or not meet the motiving **requirements** for the code.\n\n- Does it do what is is supposed to do?\n\n- Does it add value to a process?\n\n- Is it ethical? Does it do harm?\n\nThey can just **work or not work**:\n\n- Does the run at all?\n\n- Is the code brittle or buggy? \n\n- Is it sensitive to contextual factors like bad user input or a bad database connection?\n\n- Does the code work but produce incorrect outcomes?\n  \nThese lead to **two practices**:\n\n* Strategic: **Project management**\n\n* Tactical: **Testing and debugging**\n\nToday, we will focus on some concepts and tools for the latter.\n\n* We want to know whether our code is **working or not**.\n\n* We want to know if our code is of a **high quality**.\n  \n\n**Approaches to quality**\n\n* Through good **design**\n\n* Throigh principled **testing**\n\n**Some design principles**\n\n* Favor the **simple over the complex**\n\n> Don't confuse the easy with the simple!\n\n* Invest in **data design** to simplify algorithm design\n\n* Write **literate code**\n\n* Given a choice, use tools that are **documented** and have a **user community**\n\n* Many other things :-)\n\n**Some testing activities**\n\n* Syntax checking\n\n* Debugging\n\n* Ad hoc testing\n\n* **Unit-testing**\n\n* User testing\n\n**Some concepts**\n\n* Beware of **silent failures**\n\n* Testing for **the absence of bugs** is impossible\n\n    > Like Popper's concept of falsifiability: We can never prove a scientific hypothesis to be true, we can only falsify.\n\n## Exception Handling\n\nProgramming languages offer many tools for testing.\n\nThese include mechanisms to **define and capture errors** in code.\n\nWe call these errors **exceptions**.\n\n- An exception is an event that occurs during the execution of a program that disrupts the normal flow of the program's instructions. \n\nWe call we call dealing with these errors **exception handling**.\n\n- When a Python script encounters a code failure, it raises an exception. \n\n> Exception handling is the foundation of unit testing.\n\n## Python's Tools\n\n**Exceptions**\n\n- A Python **object** that represents an error\n\n- Objects that classify kinds of errors\n\n- Coders can define these \n\n**Exception Handlers**\n\n- Control structures and functions to deal with exceptions\n\n- `try`/`except`\n\n- `raise`\n\n- `assert`\n\n**Unit Testing Frameworks**\n\n- Robot\n\n- PyTest\n\n- **Unittest** \n\n- DocTest\n\n- Nose2\n\n- Testify\n\n## Errors and Exceptions\n\nA common technical interview question: Explain the difference between an **error** and an **exception**.\n\nAn **error** is a serious problem that a reasonable application should not try to catch.  \nAn error will stop execution. It means the code if broken and needs to be rewritten.\n\nAn **exception** is an issue that is expected or known to occur (e.g., division by zero).  \nSoftware must handle exceptions. For example, one bad row of data shouldn't bring down the application.\n\n## Some Common Built-in Exceptions\n\nPython comes with a number of predefined exceptions.\n\nLibraries introduce new ones, too.\n\nThey used in `raise` statement by the authors of programs when a possible error is anticipated.\n\nHere are some common examples.\n\n### `ZeroDivisionError`\n\n### `Syntax Error`\n\n### `NameError`\n\n### `IndexError`\n\n## Exception Handling with `try/except`\n\nWe use `try/except` blocks to handle exceptions in our code.\n\nThese blocks work as follows:\n* The `try` block will contain a statement. \n* If the statement fails, the the flow goes to the `except` block.\n* The exception block will have code to handle the error, rather than halting the program.\n\nThe process is very similar to `if/then`:\n* **If** there is an **error**, **then** raise an **excpetion**.\n\nMultiple `except` statements may be given, to handle specific exceptions.  \n\nBelow, we give a catch-all `except` for any kind of exception.\n\nAn **excpetion** is a mistake that will halt the execution of code. \n* For example, trying to access a dictionary key that does not exit.\n* Or, a database connection fails. \n* Very often, execeptions are caused by an external dependency failing, such as another system or the user.\n\nLet's try referencing a variable that doesn't exist with no exception handling.\n\nNow let's try referencing a variable that doesn't exist with a `try/except` block to handle the exception.    \n\n## Assert Statements\n\nAnother to catch errors before they happen is to test if computations turned out as expected.\n\nWe use `assert` to verify an expression is True.  \n- if expression is True, nothing happens.\n- if expression is False, Python raises an `AssertionError` exception.\n\nAssert statements have the followinf syntax:  \n  \n```python\nassert Expression[, Arguments]\n```\n\nwhere `[, Arguments]` denotes optional arguments.  \n\nFor example, let's say a program is expecting three arguments to be passed from the command line.    \n\nThe variable `num_args` counts the arguments.\n\nThe `assert` evaluates to True, and things proceed normally without exception.\n\nIf we change `num_args = 4` this will throw an `AssertionError` with the provided message. \n\nThe program then stops.\n\nIf the `assert` is not given a message, it throws `AssertionError:`\n\n## `raise()`\n\nExceptions can be **raised**, too.\n\nUse this if you want to halt the program and let other code that is using this code handle it.|\n\n## Futher Reading\n* https://www.geeksforgeeks.org/errors-and-exceptions-in-python/\n* https://www.tutorialspoint.com/python/assertions_in_python.htm\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":true,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"number-sections":false,"output-file":"M08-01-ExceptionHandling.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.262","bibliography":["../../refs.bib"],"_quarto-vars":{"version":2,"course_num":"DS 5100","course_title":"Programming for Data Science","academic_term":"Fall 2023","cohort_type":"Online","course_code":"DS5100-2023-08-O","course_allocation":"msds_ds5100","canvas_url":"https://canvas.its.virginia.edu/courses/75059","github_url":"https://github.com/ontoligent/DS5100-2023-08-O","website_url":"https://ontoligent.github.io/DS5100-2023-08-O","survey_form_url":"https://forms.office.com/r/YWaFPXPKz8","request_form_url":"https://forms.office.com/r/7G65N5eppk"},"theme":"cosmo","fig-cap-location":"bottom","reader-mode":false},"extensions":{"book":{"multiFile":true}}}}}