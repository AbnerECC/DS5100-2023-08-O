{"title":"NB: Loose Ends","markdown":{"headingText":"NB: Loose Ends","containsRefs":false,"markdown":"\n\n## qplot\n\n`qplot` creates quick and simple plots that use all of the `ggplot2` defaults.\n\nIt let’s you define a plot in a single call that gives a set of **aesthetics** and **a data set**.\n\nIt infers a geom from your data and mappings if you don’t supply onw. Recall this is how plot worked.\n\n### Gotchas\n\nOddly, `data` is not the first argument, so it won't work with `%>%`. \n\nThis will fail:\n\nAlso, `data` has to be called by key, e.g. `data = mpg`.\n\nThis will fail, too:\n\nHere's a nice guide in PDF form: [Getting started with qplot](https://pages.stat.wisc.edu/~st849-1/Rnotes/qplot.pdf)\n\n## GGPlot in Python\n\nThere are `pygg` `plotnine` and \n\nHard to replicate R syntax in Python.\n\nBut why should it? Should just implement to pattern Pythonically.\n\nSee example in `M14-00a-Plotnine.ipynb`.\n\n## Plotly in R\n\n**Types of plots**\n\n    'bar', 'barpolar', 'box', 'candlestick', 'carpet', 'choropleth', 'choroplethmapbox', 'cone', 'contour', 'contourcarpet', 'densitymapbox', 'funnel', 'funnelarea', 'heatmap', 'heatmapgl', 'histogram', 'histogram2d', 'histogram2dcontour', 'icicle', 'image', 'indicator', 'isosurface', 'mesh3d', 'ohlc', 'parcats', 'parcoords', 'pie', 'pointcloud', 'sankey', 'scatter', 'scatter3d', 'scattercarpet', 'scattergeo', 'scattergl', 'scattermapbox', 'scatterpolar', 'scatterpolargl', 'scatterternary', 'splom', 'streamtube', 'sunburst', 'surface', 'table', 'treemap', 'violin', 'volume', 'waterfall'\n\n### GGPlotly \n\nBest of both worlds?\n\n> With `ggplotly()` by Plotly, you can convert your `ggplot2` figures into interactive ones powered by `plotly.js`, ready for embedding into Dash applications.\n\nIf you call `ggplotly()` with no argument, it will display your last ggplot as a plotly plot. \n\nPretty cool.\n\nYou also pass it a plot that was assigned to a variable.\n\nIn both cases, you can then add ploty features to your graph.\n\n\\>\\>\\> [Learn more.](https://plotly.com/ggplot2/)\n\n## Using `::` in R\n\nWhen you load libraries in R that have the same function names, R resolves this by picking a default, and then letting you access the others using `::` operator to specify the library from which the method comes.\n\nThe rule is that the package loaded last will hide, or **mask**, the function from earlier packages. \n\nIf you want to have a certain function be the default, make sure you load it last.\n\nFor example, when we load `tidyverse`, we get this message:\n\n```\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n\nThis means that `dplyr` overrides the `filter()` and `lag()` methods associated with the `stats` library.\n\nSimilarly, when you load `plotly`, you'll see this:\n\n```\nAttaching package: ‘plotly’\n\nThe following object is masked from ‘package:ggplot2’:\n\n    last_plot\n\nThe following object is masked from ‘package:stats’:\n\n    filter\n\nThe following object is masked from ‘package:graphics’:\n\n    layout\n```\n\nOne thing I have noticed is that even though the last library masks the other functions, the help operator `?<objectname>` does not follow this.\n\nAlso, in this script, note that `dplyr::filter` is the default, even though `plotly::filter` loaded after dplyr. This is because Plotly' filter function is not used in the normal way; it appears in the context of the `transforms` argument to `plot_ly()`. No need to get into this now, but just know that that's why it does not mask `dplyr`.\n\n**Examples**\n\nHere, we call filter by itself and it uses the one from `dplyr`.\n\nBut if we ask for help, we'll get the original `stats` version.\n\nAnd if we ask for help about Plotly's version, we see this:\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":true,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"number-sections":false,"output-file":"M12-03-Qplot-and-Plotly.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.262","bibliography":["../../refs.bib"],"_quarto-vars":{"version":2,"course_num":"DS 5100","course_title":"Programming for Data Science","academic_term":"Fall 2023","cohort_type":"Online","course_code":"DS5100-2023-08-O","course_allocation":"msds_ds5100","canvas_url":"https://canvas.its.virginia.edu/courses/75059","github_url":"https://github.com/ontoligent/DS5100-2023-08-O","website_url":"https://ontoligent.github.io/DS5100-2023-08-O","survey_form_url":"https://forms.office.com/r/YWaFPXPKz8","request_form_url":"https://forms.office.com/r/7G65N5eppk"},"theme":"cosmo","fig-cap-location":"bottom","reader-mode":false},"extensions":{"book":{"multiFile":true}}}}}