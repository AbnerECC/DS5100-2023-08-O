{"title":"NB: Variable Scope","markdown":{"headingText":"NB: Variable Scope","containsRefs":false,"markdown":"\n\n## Overview\n\nA variable's **scope** is the part of a program where it is **visible**.\n\n* Scope refers to the **coding region**, such as a function block, from which a particular Python object is accessible.\n* Visible means available or **usable** to the code block in question.\n* If a variable is **in scope** to a function, it is visible the function.\n* If it is **out of scope** to a function, it is not visible the function.\n\nWhen a variable is defined **inside** of a function, it is not visible outside of the function.\n* We say such variables are **local** to the function.\n* They are also removed from memory when the function completes.\n\nWhen a variable is defined **outside** of any function in a script, it is visible to any function inside of the script\n* We say such variables are **global** to the functions in the file or context in which the variables are defined.\n* A function can replace a global variable with local variable by defining that variable. In this case, a variable can have global and local versions in the same program.\n\nSometimes variable scope is called **lexical** scope.\n\nIt is helpful to have a good understanding of scope to avoid surprises and confusion.  \n\nThe concept is easier than it may look in the abstract. Let's look at some examples where we vary the use of local and global definitions of `x`.\n\n## Lutz on Scoping\n\nHere's an excerpt from [Lutz, Chapter 17](https://learning.oreilly.com/library/view/learning-python-5th/9781449355722/ch17.html#scope_details). Please read the whole thing.\n\n**The enclosing module is a global scope.** Each module is a global scope—that is, a namespace in which variables created (assigned) at the top level of the module file live. Global variables become attributes of a module object to the outside world after imports but can also be used as simple variables within the module file itself.\n\n**The global scope spans a single file only.** Don’t be fooled by the word “global” here—names at the top level of a file are global to code within that single file only. There is really no notion of a single, all-encompassing global file-based scope in Python. Instead, names are partitioned into modules, and you must always import a module explicitly if you want to be able to use the names its file defines. **When you hear “global” in Python, think “module.”**\n\n**Assigned names are local unless declared global or nonlocal.** By default, all the names assigned inside a function definition are put in the local scope (the namespace associated with the function call). If you need to assign a name that lives at the top level of the module enclosing the function, you can do so by declaring it in a global statement inside the function. If you need to assign a name that lives in an enclosing def, as of Python 3.X you can do so by declaring it in a nonlocal statement.\n\n**All other names are enclosing function locals, globals, or built-ins.** Names not assigned a value in the function definition are assumed to be enclosing scope locals, defined in a physically surrounding def statement; globals that live in the enclosing module’s namespace; or built-ins in the predefined built-ins module Python provides.\n\n**Each call to a function creates a new local scope.** Every time you call a function, you create a new local scope—that is, a namespace in which the names created inside that function will usually live. You can think of each def statement (and lambda expression) as defining a new local scope, but the local scope actually corresponds to a function call. Because Python allows functions to call themselves to loop—an advanced technique known as recursion and noted briefly in Chapter 9 when we explored comparisons—each active call receives its own copy of the function’s local variables. Recursion is useful in functions we write as well, to process structures whose shapes can’t be predicted ahead of time; we’ll explore it more fully in Chapter 19.\n\nAnd here is a nice visualization of scopes:\n\n![Car with tinted glass](assets/lp5e_1701.png)\n\nPlease read [Lutz, Chapter 17](https://learning.oreilly.com/library/view/learning-python-5th/9781449355722/ch17.html#scope_details) for a good overview of scoping.\n\n## The Tinted Glass Metaphor\n\n<img src=\"assets/tinted-glass.jpg\" \n     width=350\n     style=\"box-shadow: 10px 5px 5px gray;\"\n     >\n\nSo, code regions within a program are like vehicles with tinted glass:\n* Passengers can see outside, but outsiders can't see inside.\n* Passengers in a vehicle can let outsiders look in by lowering the window.\n\nOr something. Lile models, all metaphors are wrong, but some are useful. :-)\n\n## Example 1\n\n**`x` defined outside a function but used inside of it**\n\nIn the code below:\n* `x` is **global** and seen from inside the function.  \n* `a` is **local** to the function. trying to print outside function throws error.\n\nNote that arguments are essentially locally defined variables.\n\nThe following works because `x` is global and functions can access globals so long as they don't reassign the variable name.\n\nThe following fails because `a` local and not visible outside the function.\n\n## Example 2\n\n**`x` defined both outside and inside function, and used inside the function**\n\nThis function reassigns `x`, so it becomes local. \n\nNote that a variable becomes local once it is used in an assignment statement within a function, or if it the name of an argument.\n\n## Example 2a\n\nHere we define `x` as an argument.\n\nThis has the same effect as defining it in the body of the function.\n\nAs an argument, though, it can be assigned the value of the global. \n\nNevertheless, only the value is being passed between the global and local versions of `x`.\n\n## Example 3\n\n**`x` defined both outside and inside function, and used inside the function in both global and local modes**\n\nThis one is interesting. It fails, but it's not clear why at first.  \n\nThe error can be fixed by referencing x as `global` inside function. \n\nNote that the two instances of the variable `z` coexist in the same script because of the rules of scoping.\n\n## Local / global conflicts\n\nWhat will calling `guess()` do?\n\nHint: \"If you assign a name in any way within a def, it will become a local to that function by default.\" (Lutz)\n\nConsider the following expression, which is the same as the unary operation inside of the function `guess()`.\n\nThe `x` on the left is `local`, since it is being *defined* inside the function.\n\nHowever, the `x` on the right is assumed to already be defined, and so is `global`.\n\nIn effect, Python is presented with a contradiction and so throws an error.\n\nWe will see that R does not do this; it just goes with the `global`.\n\n## Nonlocal\n\nIf a variable is assigned in an enclosing `def`, it is `nonlocal` to nested functions.\n\nThe `nonlocal` keyword is similar to `global`, except that it refers to the scope of the enclosing function, not the script that contains the funtions.\n\n## Namespaces\n\nDefinitions of scope make reference to **namespaces**. Scope and namespaces are closely intertwined concepts. Sometimes it is assumed that the reader knows what this means. \n\nIf you've never heard of namespaces, or are unsure of what they are, here's a brief explanation.\n\nA namespace is a system that allows for **a unique name** to associated with each and **every object** in a Python program.\n* Remember that **an object can be anything** in Python, not just variable, e.g. a function or a class. \n* Python maintains namespaces internally as **dictionaries**. \n\nA good **analogy** to a namespace system is the **file system** on a computer. You can have files of the same name so long as they are in different folders. The complete name of the file is actually the filename and the names of its parent folders, i.e. the path to the file in the file system.\n\nAnother anology is in **human names** -- personal names and family names, i.e. first and last names in European countries. These in turn might be contained by larger social groupings.\n\nFinally, another analogy is **home addresses** -- house numbers and street names can be reused based on their \"path\" in the tree of geographic entities that include cities, states, nations, etc.\n\nSimilarly, Python understands what exact method or variable one is trying to point to in the code, depending upon the namespace. \n\nNote that in each of these cases, **the data structure is a directed acyclic graph (DAG)**, which is universal structure for organizing unique names. \n \n \n\n## Some Visualizations\n \n<img src=\"assets/types_namespace-1.png\" width=500>\n \n\nThe same object name can be present in multiple namespaces as isolation between the same name is maintained by their namespace.\n\n<img src=\"assets/namespaces.png\" width=500>\n\nSource: [\"Namespaces and Scope in Python\" (GFG)](https://www.geeksforgeeks.org/namespaces-and-scope-in-python/).\n\n\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":true,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"number-sections":false,"output-file":"M04-05-Scope.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.262","bibliography":["../../refs.bib"],"_quarto-vars":{"version":2,"course_num":"DS 5100","course_title":"Programming for Data Science","academic_term":"Fall 2023","cohort_type":"Online","course_code":"DS5100-2023-08-O","course_allocation":"msds_ds5100","canvas_url":"https://canvas.its.virginia.edu/courses/75059","github_url":"https://github.com/ontoligent/DS5100-2023-08-O","website_url":"https://ontoligent.github.io/DS5100-2023-08-O","survey_form_url":"https://forms.office.com/r/YWaFPXPKz8","request_form_url":"https://forms.office.com/r/7G65N5eppk"},"theme":"cosmo","fig-cap-location":"bottom","reader-mode":false},"extensions":{"book":{"multiFile":true}}}}}