{"title":"NB: Functions Calling Functions","markdown":{"headingText":"NB: Functions Calling Functions","containsRefs":false,"markdown":"\n\n**Purpose**:\n* Illustrate concept of function design\n* Demonstrate how functions can break down a process into simple components\n* Demonstrate how component functions build on each other\n* Introduce idea of functional groups\n* Motivate use of classes (to be introduced later)\n\n## Basic Insight\n\nFunctions contain any code, so they can contain functions.\n* Functions can call other functions\n* Functions can define new functions\n\nWe create functions that call functions in order to break a complex process into components.\n* Some functions focus on simple component processes\n* Other functions combine these into higher order processes\n* Some functions may be focused on computation, while others may be focused on interacting with users or data sources\n* We can think of this a division of labor, or \"separation of concerns,\" among functions\n\nWhen you create groups of functions, they often form natural groups that associated with a common process or task.\n* These function groups often share variables in addition to calling each ohter\n\nLet's look at some examples to illustrate these points.\n\n## Example 1: Converting Temperatures\n\nHere are three functions that work together to make a temperature converter.\n\nNotice how the last function integrates the first two.\n\nNow, here is function that combines the above functions into a **user-facing interface** to the other functions.\n\n### A More Pythonic Solution\n\nWe replace if/then statements with dictionary logic.\n\n## Example 2: Counting Vowels\n\n### A More Pythonic Solution\n\nWe can use a lambda function with a comprehension to replace the fisrt two functions above.\n\n## Example 3: Calculating Tax\n\nWe write two related functions:\n* One to compute the **tax** based on a **gross pay** and a **tax rate**.\n* One to compute the **net pay** using the previous function.\n\nIn addition, we want to write some functions that use these functions to interact with a user.\n* One to get the input value of the gross pay and print the tax.\n* One to print the net pay based on the previous function.\n\nNote the division of labor, or \"separation of concerns\", in these functions:\n* Some do calculative work\n* Some do interactive work\n\nTo compute tax, we have these data:\n```\ngross_pay    tax_rate\n---------------------\n0   - 240    0%\n241 - 480    15%\n481 - more   28% \n```\n\n----\nThis time, we want to create a group of functions that expect some global variables to exist and use these instead of return statements.\n\nIn the code below, we globalize any variables that are assigned in our functions. \n\nThis allows them to be shared by all the other functions. \n\nNote that this is effective when our global environment -- the containing script -- contains only these functions. \n\nLater in this course, we will look at mechanisms to segment our code in this way.\n\n----\n\n## Concluding Observations\n\n* Notice how each example has functions that build on each other.\n* These functions share both data and a general goal.\n* The fact that data and functions go together is the motivation for creating classes.\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":true,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"number-sections":false,"output-file":"M04-06-FunctionsCallingFunctions.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.262","bibliography":["../../refs.bib"],"_quarto-vars":{"version":2,"course_num":"DS 5100","course_title":"Programming for Data Science","academic_term":"Fall 2023","cohort_type":"Online","course_code":"DS5100-2023-08-O","course_allocation":"msds_ds5100","canvas_url":"https://canvas.its.virginia.edu/courses/75059","github_url":"https://github.com/ontoligent/DS5100-2023-08-O","website_url":"https://ontoligent.github.io/DS5100-2023-08-O","survey_form_url":"https://forms.office.com/r/YWaFPXPKz8","request_form_url":"https://forms.office.com/r/7G65N5eppk"},"theme":"cosmo","fig-cap-location":"bottom","reader-mode":false},"extensions":{"book":{"multiFile":true}}}}}