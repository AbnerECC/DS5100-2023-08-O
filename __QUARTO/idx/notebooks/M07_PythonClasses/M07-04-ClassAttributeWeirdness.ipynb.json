{"title":"NB: Understanding Class Attributes","markdown":{"headingText":"NB: Understanding Class Attributes","containsRefs":false,"markdown":"\n\nThis notebook demonstrates how class and instance attributes are related to each other.\n\n## A Simple Example\n\nWe define a class with one attribute.\n\nWe create an instance of the class.\n\nNotice that the class defines the value for the instance.\n\nNow, the instance attribute changes if the class attribute is changed.\n\nWhat if we the local attribute's value?\n\nWhat happens to the class attribute?\n\nTurns out we cannot override a global with a local.\n\nWe can see that the instance attribute is now unaffected by changing the value of the global.\n\nWhat happened?\n\nBy assigning a value to the instance attribute, we converted from global in the class to local in the instance.\n\nThis is similar to what we saw with local and global variables in functions.\n\nFinally, notice how changing the value of the class attribute changes **all** the instance attributes that have not overridden the attribute.\n\n## Mutable Class Attributes\n\nThere is an interesting gotcha regarding class attributes in Python.\n\nLists and other mutable data structures can be class attributes and yet have their values modified by instances.\n\nThis is kind of weird, and you should look out for it.\n\nTo demonstrate, we define a class with two instance variables, one a scalar and one a list.\n\nWe define a method to alter the value of each.\n\nWe also define a method compare the state of the instance with that of its class.\n\nNow let's run some tests. \n\nWe define and instance and change nothing.\n\nNow let's increment the attributes and see the results.\n\nThe method **does** disconnect the instance `foo` from the class `foo`.\n\nBut it **does not** disconnect the instance `bar` from the class `bar`.\n\nInstead, a change that took place in one instance affects the state of all other instances!\n\nThe difference is that `foo` is a scalar, and `bar` is a list, i.e. mutable data structure.\n\nWe do it again to drive the point home.\n\nNow, let's replace list itself in the instance.\n\nNotice that now the class list is not altered by the instance list.\n\nIt remains in the state before the list itself was re-assigned by the instance.\n\nThis is because we redefined the list itself, not just its content.\n\nLet's define a second instance.\n\nThe new instance has the original value of `foo`.\n\nHowever, notice it starts of with the modified value of `bar` before it was replaced.\n\nWe do it a few more times to drive the point home.\n\n**Some take-aways:**\n    \n- Class attribute changes affect those attributes in all of it instances ...\n- ... unless the instance assigns a value to the attribute.\n- However, appending to a list &mdash; or, more generally, modifying data in a mutable data structure  &mdash; does not count as an assignment operation. The instance changes will affect the class state. \n- Bottom line: DEFINE CLASS ATTRIBUTES WITH CAUTION.\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":true,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"number-sections":false,"output-file":"M07-04-ClassAttributeWeirdness.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.262","bibliography":["../../refs.bib"],"_quarto-vars":{"version":2,"course_num":"DS 5100","course_title":"Programming for Data Science","academic_term":"Fall 2023","cohort_type":"Online","course_code":"DS5100-2023-08-O","course_allocation":"msds_ds5100","canvas_url":"https://canvas.its.virginia.edu/courses/75059","github_url":"https://github.com/ontoligent/DS5100-2023-08-O","website_url":"https://ontoligent.github.io/DS5100-2023-08-O","survey_form_url":"https://forms.office.com/r/YWaFPXPKz8","request_form_url":"https://forms.office.com/r/7G65N5eppk"},"theme":"cosmo","fig-cap-location":"bottom","reader-mode":false},"extensions":{"book":{"multiFile":true}}}}}