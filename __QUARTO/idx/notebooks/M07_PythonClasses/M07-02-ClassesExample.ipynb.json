{"title":"NB: Classes Example","markdown":{"headingText":"NB: Classes Example","containsRefs":false,"markdown":"\n\nHere's an example of a class motivated by our earlier observation that functions come in groups.\n\n## Set Up\n\n## Method 1: Nothing Special\n\nWe define a set of functions that work in a sequence, where the return value of one is the argument of the other.\n\n### Define Functions\n\n### Create Instances\n\n### Doing it all at once\n\n## Method 2: With Globals\n\n### Define a Shared Data Structure\n\nWe create a dictionary called `config` to store our instance data.\n\nWe'll treat this as a **global**.\n\n### Define Methods \n\n### Populate Config\n\nWe populate our configuration config with some instances.\n\n### Call Main Function\n\n## Method 3: As Class\n\nDefine a class that contains the config data structure and all the functions as attributes and methods.\n\n## Conclusions\n\nThe OOP approach handles scoping issues as well as data management.\n\nNotice how the dictionary is replaced by the object.\n\nNot only does it provide a place to store the data, it also provides a schema for it:\n* You don't need to remember what keys to put in the `data` dictionary of method 2. The object specifies them.\n\nNotice also that we don't pass arguments to the object as we do with functions (although we can). \n\nWe assign values to attributes directly.\n\n**Can you think of any other advantages or disadvantages?**\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":true,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"number-sections":false,"output-file":"M07-02-ClassesExample.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.262","bibliography":["../../refs.bib"],"_quarto-vars":{"version":2,"course_num":"DS 5100","course_title":"Programming for Data Science","academic_term":"Fall 2023","cohort_type":"Online","course_code":"DS5100-2023-08-O","course_allocation":"msds_ds5100","canvas_url":"https://canvas.its.virginia.edu/courses/75059","github_url":"https://github.com/ontoligent/DS5100-2023-08-O","website_url":"https://ontoligent.github.io/DS5100-2023-08-O","survey_form_url":"https://forms.office.com/r/YWaFPXPKz8","request_form_url":"https://forms.office.com/r/7G65N5eppk"},"theme":"cosmo","fig-cap-location":"bottom","reader-mode":false},"extensions":{"book":{"multiFile":true}}}}}