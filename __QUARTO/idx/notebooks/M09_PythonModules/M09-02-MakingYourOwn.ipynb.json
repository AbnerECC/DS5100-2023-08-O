{"title":"NB: Building Your Own Package","markdown":{"headingText":"NB: Building Your Own Package","containsRefs":false,"markdown":"\n\n## Some Examples of Packages\n\n* Scikit Learn: [Repo](https://github.com/scikit-learn/scikit-learn) | [Site](https://scikit-learn.org/stable/) (Structure models code)\n* NLTK [Repo](https://github.com/nltk/nltk) | [Site](https://www.nltk.org/) (Structure models spaghetti)\n* SpaCy [Repo](https://github.com/explosion/spaCy) | [Site (API)](https://spacy.io/api) (Structure kinda models code)\n* https://github.com/ontoligent/mazo\n* https://github.com/ontoligent-design/polo2\n\n## Why Build a Package?\n\nYou package code in order to add it to your python system for **general use**, and to **share** it with others.\n\nIt's also good to have well **organized code**. \\\nThis applies to how to organize your programs internally, and externally as files and directories.\n\nIt's **easy** to do. There are a bunch of nifty tools that help you build, install and\ndistribute packages.\n\n## What is a Package?\n\nAgain: **A collection of modules** (python files) along with:\n* the **documentation**\n* the **tests**\n* any **top-level scripts**\n* any **data files** required\n* instructions and scripts to **build and install** it\n\n## What does it mean to build your Package?\n\nTo build your own package, you of course need some Python files you want to deploy.\n\nThen you create the following:\n\n1.  Create the basic package structure, such as `EXAMPLE 3` below.\n2.  Write a `setup.py` using a package tool (see below).\n\n```bash\n## EXAMPLE 3\n\na_package_dir\n    __init__.py\n    module_a.py\ntests\n    ...\nsetup.py # Or pyproject.toml \n```\n\nThis will be contained by a project directory.\n\n## About `setup.py`\n\nYour `setup.py` file describes your package, and tells the packaging tool how to package, build, and install it.\n\nIt is Python code, so you can add anything custom you need to it.\n\nIn the simple case, it is basically a configuration files with keys and values.\n\nWhat does `setup.py` contain?\n\n-   Version & package metadata\n-   List of packages to include\n-   List of other files to include\n-   List of dependencies\n-   List of extensions to be compiled\n\n**About `pyproject.toml`**\n\nFor a lot reasons that beyond the scope of this document, `setup.py` \\\nis being superceded by the use of `pyproject.toml` files to store \\\nsetup configuration information. \n\nHowever, for now we're going to stick to the old school approach.\n\n## Example Setup Files\n\n### Example 1\n\n```python\nfrom distutils.core import setup\n\nsetup(name='mypkg',\n      version='1.0',\n      \n      # list folders, not files\n      packages=['mypkg', 'mypkg.subpkg'], # Include packages in the project\n      install_requires=['click'],         # Required libraries\n)\n```\n\n### Example 2\n\n```python\nfrom setuptools import setup, find_packages\n\nsetup(\n    name='MyPackageName',\n    version='1.0.0',\n    url='https://github.com/mypackage.git',\n    author='Author Name',\n    author_email='author@gmail.com',\n    description='Description of my package',\n    packages=find_packages(),    \n    install_requires=['numpy >= 1.11.1', 'matplotlib >= 1.5.1'],\n)\n```\n\n### Example 3\n\n```python\nfrom setuptools import setup\n\nsetup(\n    name = 'PackageName',\n    version = '0.1.0',\n    author = 'An Awesome Coder',\n    author_email = 'aac@example.com',\n    packages = ['package_name', 'package_name.test'],\n    scripts = ['bin/script1','bin/script2'],\n    url = 'http://pypi.python.org/pypi/PackageName/',\n    license = 'LICENSE.txt',\n    description = 'An awesome package that does something',\n    long_description = open('README.txt').read(),\n    install_requires = [\n        \"Django >= 1.1.1\",\n        \"pytest\",\n    ],\n)\n```\n\n## A Summary of Keys\n\nAs mentioned about, the main content of basic setup files is configuraton information. The keys that you should include in your projects are the following:\n\n* **name**: A string of the package name as title, not a filename. \n* **version**: A string of the version number expression, typically using the `MAJOR.MINOR.PATCH` pattern. See [Semantic Versioning](https://semver.org/) for more information. \n* **author**: A string with the creator's name.\n* **author_email**: A string with the creator's email address. \n* **packages**: A list of strings of package directories in the project.\n* **url**: A string of the URL to the code repo.\n* **license**: A string of the license file name.\n* **description**: A string with a short blurb of the project.\n* **long_description**: A link to a longer description. Can do something like `open('README.txt').read()`.\n* **install_requires**: A list of strings of external libraries that the project requires.\n\n### Python packaging tools\n\nIn writing `setup.py`, you need to use a packaging tool. \n\nNotice that we've imported the `setuptools` library.\n\n* The package tool `distutils` is included with Python, but it is not recommended.\n* Instead, use `setuptools`, a third party tool that extends `distutils` and is used in most modern Python installations.\n\n### Summary of fields\n\n## Quick Demo\n\nSo, let's look at a simple package.\n\nSource: [Minimal Structure (python-packaging)](https://python-packaging.readthedocs.io/en/latest/minimal.html)\n\n### Directory \n\nHere is our directory structure:\n\n### Setup file\n\nHere is what out `setup.py` file has inside:\n\n### `__init__.py`\n\n### `funniest.py`\n\n### Install\n\n### Try it out\n\n## Many Ways to Install\n\n**Running `setup.py` directly with python**\n\n```bash\npython setup.py sdist   # Builds a source distribution as tar archie\npython setup.py build   # Builds from source\npython setup.py install # Installs to Python\npython setup.py develop # Installs in develop mode (changes are immediately reflected)\n```\n\n**Using `pip`**\n\n```bash\npip install .    # Installs to Python\npip install -e . # To create symlink, so you can keep working on the code (develop mode)\n```\n\n## Testing Code\n\nAs you work, you will want to write tests and put them somewhere. You have options:\n\n* If your package and test code are small and self contained, put the tests in with the package, e.g. `package/test`.\n* If the tests are large or complex, or require reading/writing files, or significant sample data, put your tests outside the package.\n\nSee [Where to Put Tests?](http://pythonchb.github.io/PythonTopics/where_to_put_tests.html).\n\n## A More Complex Package Structure\n\n```bash\nproject_name/\n    bin/\n    CHANGES.txt\n    docs/\n    LICENSE.txt\n    MANIFEST.in\n    README.txt\n    setup.py\n    test_module_1.py\n    test_module2.py      \n    package_name/\n        __init__.py\n        module1.py\n        module2.py\n```\n\n`CHANGES.txt`: log of changes with each\nrelease\n\n`LICENSE.txt`: text of the license you\nchoose (do choose one!)\n\n`MANIFEST.in`: description of what\nnon-code files to include\n\n`README.txt`: description of the\npackage should be written in ReST or Markdown (for PyPi):\n\n`setup.py`: the script for\nbuilding/installing package.\n\n`bin/`: This is where you put top-level\nscripts\n\n( some folks use `scripts` )\n\n`docs/`: the documentation\n\n`package_name/`: The main package this\nis where the code goes.\n\n`test/`: your unit tests. Options here:\n\n## More Info\nhttps://packaging.python.org/en/latest/overview/\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":true,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"number-sections":false,"output-file":"M09-02-MakingYourOwn.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.262","bibliography":["../../refs.bib"],"_quarto-vars":{"version":2,"course_num":"DS 5100","course_title":"Programming for Data Science","academic_term":"Fall 2023","cohort_type":"Online","course_code":"DS5100-2023-08-O","course_allocation":"msds_ds5100","canvas_url":"https://canvas.its.virginia.edu/courses/75059","github_url":"https://github.com/ontoligent/DS5100-2023-08-O","website_url":"https://ontoligent.github.io/DS5100-2023-08-O","survey_form_url":"https://forms.office.com/r/YWaFPXPKz8","request_form_url":"https://forms.office.com/r/7G65N5eppk"},"theme":"cosmo","fig-cap-location":"bottom","reader-mode":false},"extensions":{"book":{"multiFile":true}}}}}