{"title":"NB: Control Structures","markdown":{"headingText":"NB: Control Structures","containsRefs":false,"markdown":"\n\n**Topics**:\n\n- conditional statements\n- if, else, elif\n- for-loop\n- while-loop\n- break\n- continue\n- iteration\n\n## Introducing Control Structures\n\nPython includes structures to control the flow of a program:\n\n- `conditions` (if, else)\n- `loops`\n  - `while-loop`    \n  Execute statements while a condition is true\n  - `for-loop`    \n  Iterates over a iterable object (list, tuple, dict, set, string)\n  \n\n## Indentation\n\nThis is where Python differs from most languages. To define control structures, \\\nand functional blocks of code in general, most languages use either characters \\\nlike braces `{` and `}` or key words like `IF ... END IF`.\n\nPython uses tabs &mdash; spaces, actually &mdash; to signify logical blocks off code.\n\nIt is therefore imperative to understand and get a feel for indentation. \n\nFor more information, see [Lutz 2019, \"A Tale of Two Ifs.\"](https://learning.oreilly.com/library/view/learning-python-5th/9781449355722/ch10s03.html)\n\n## Conditions\n\n### `if` and `else` can be used for conditional processing.\n\n### `elif`\n\n`elif` is reached when the previous statements are not.\n\nNote that these are disjoint &mdash; if one succeeds, those \\\nthat follow are not processed.\n\nThis is unlike a series of `if` statements.\n\n### `else`\n\n`else` can be used as a catchall\n\n### `if` and `else` as one-liners\n\nNotice `==` for checking the condition  `x % 2 == 1`.\n\nboth `if` and `else` are required. This breaks:\n\n### Using multiple conditions\n\nIf statements can be complex combinations of expressions. \n\nUse parentheses carefully, to keep order of operations correct.\n\n**Correct:**\n\n**Incorrect:**\n\nThe problem is the misplaced parenthesis.\n\nThis is because the condition line is interpreted as`True < 2`,\\\nwhere `True` is cast to integer value $1$.\n\n## Loops\n\n### `while`\n\nWhat does this print?\n\n### `break` to exit the loop altogether\n\nsometimes you want to quit the loop early, if some condition is met.  \nuses `if-statement`\n\nThe `break` causes the loop to end early\n\n### `continue` to stop the current iteration\n\nsometimes you want to introduce skipping behavior in the loop.  \nuses `if-statement`\n\nThe `continue` causes the loop to skip printing 4\n\n### `for`   \n\niterate over an iterable\n\nquit early if `SF` reached, using **break**\n\nskip over `SF` if reached, using **continue**\n\n## `while` vs `for`\n\nFor loops are used to loop through a list of values or an operation in which the number of iterations is **known** in advance.\n\nWhile loops are when **you don't know** how many interations it will take &mdash; you are depending on some condition to be met.\n\nIt is possible for while loops to be unending, for example:\n\n```python\nwhile 1:\n    print(\"This is so annoying\")\n```\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":true,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"number-sections":false,"output-file":"M03-01-ControlStructures.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.262","bibliography":["../../refs.bib"],"_quarto-vars":{"version":2,"course_num":"DS 5100","course_title":"Programming for Data Science","academic_term":"Fall 2023","cohort_type":"Online","course_code":"DS5100-2023-08-O","course_allocation":"msds_ds5100","canvas_url":"https://canvas.its.virginia.edu/courses/75059","github_url":"https://github.com/ontoligent/DS5100-2023-08-O","website_url":"https://ontoligent.github.io/DS5100-2023-08-O","survey_form_url":"https://forms.office.com/r/YWaFPXPKz8","request_form_url":"https://forms.office.com/r/7G65N5eppk"},"theme":"cosmo","fig-cap-location":"bottom","reader-mode":false},"extensions":{"book":{"multiFile":true}}}}}