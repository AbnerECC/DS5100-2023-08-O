{"title":"NB: Iterables and Iterators","markdown":{"headingText":"NB: Iterables and Iterators","containsRefs":false,"markdown":"\n\n**Purpose**\n- Define iterables and iterators\n- Using two methods, show how iterators can be used to return data from sets, lists, strings, tuples, dicts:\n  - `for` loops    \n  - `iter()` and `next()`\n\n**Specific Topics**\n- iterable objects or iterables\n- iterators\n- iteration\n- sequence\n- collection\n\n# Defining Iterables and Iterators\n\n**Iterable objects** or **iterables** can return elements one at a time.\n\nAn **iterator** is an object that iterates over iterable objects such as sets, lists, tuples, dictionaries, and strings.  \n\n**Iteration** can be implemented: \n- with `for` loops \n- with the `next()` method\n\nNext, we show examples for various iterables.\n\n# Lists\n\n## iterating using `for`\n\n## iterating using `iter()` and `next()`\n\n`iter()` gets an iterator. \nPops out a value each time it's used.\n\n`next()` gets the next item from the iterator \n\nCalling `next()` when the iterator has reached the end of the list produces an exception:\n\nNext, look at the type of the iterator, and the documentation\n\nNote that `for` implicitly creates an iterator and executes `next()` on each loop iteration. This is best way to iterate through a list-like object.\n\n# Sequences and Collections\n\nWe iterated over a list. Next we will illustrate for other iterables: `str`, `tuple`, `set`, `dict`\n\nlists, tuples, and strings are **sequences**. Sequences are designed so that elements come out of them in the same order they were put in.\n\nSets and dictionaries are not sequences, since they don't keep elements in order. They are called **collections**.  The ordering of the items is arbitrary.\n\nNOTE: This has changed for dictionaries in Python 3.7:\n> the insertion-order preservation nature of dict objects has been declared to be an official part of the Python language spec.\\\n-- [What's New in Python 3.7](https://docs.python.org/3.7/whatsnew/3.7.html)\n\n# Sets\n\n**iterating using `for`**\n\n**iterating using `iter()` and `next()`**\n\n# Strings\n\n**iterating using `for`**\n\n**iterating using `iter()` and `next()`**\n\n# Tuples\n\n**iterating using `for`**\n\n**iterating using `iter()` and `next()`**\n\n# Dictionaries\n\n**iterating using `for`**\n\nAlternatively, keys and values can be extracted from the dict by:\n- looping over the keys\n- extract the value by indexing into the dict with the key\n\n# Ranges\n\n**iterating using `for`**\n\nIf you just want to iterate for a known number of times, use `range()`.\n\n# Get iteration number with `enumerate()`\n\nVery often you will want to know iteration number you are on in a loop. \n\nThis can be used to name files or dict keys, for example.\n\n`enumerate()` will return the index and key for each iteration.\n\n# Nested Loops\n\nIterations can be nested!\n\nThis works well with nested data structures, like dicts within dicts.\n\nThis is basically how `JSON` files are handled, BTW.\n\nBe careful, though -- these can get deep and complicated.\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":true,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"number-sections":false,"output-file":"M03-02-IterablesAndIterators.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.262","bibliography":["../../refs.bib"],"_quarto-vars":{"version":2,"course_num":"DS 5100","course_title":"Programming for Data Science","academic_term":"Fall 2023","cohort_type":"Online","course_code":"DS5100-2023-08-O","course_allocation":"msds_ds5100","canvas_url":"https://canvas.its.virginia.edu/courses/75059","github_url":"https://github.com/ontoligent/DS5100-2023-08-O","website_url":"https://ontoligent.github.io/DS5100-2023-08-O","survey_form_url":"https://forms.office.com/r/YWaFPXPKz8","request_form_url":"https://forms.office.com/r/7G65N5eppk"},"theme":"cosmo","fig-cap-location":"bottom","reader-mode":false},"extensions":{"book":{"multiFile":true}}}}}