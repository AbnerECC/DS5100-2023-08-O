{"title":"NB: Comprehensions","markdown":{"headingText":"NB: Comprehensions","containsRefs":false,"markdown":"\n\n**Purpose**\n- Explain the benefit of list comprehensions\n- Illustrate the use of list comprehensions\n- Explain the benefit of dict comprehensions\n- Illustrate the use of dict comprehensions\n\n**Concepts**\n- list comprehension\n- dict comprehension\n- iterators\n\n# List Comprehensions\n\nConsider this task: check if each integer in a list is odd.  \n\nWithout list comprehensions, you might do this:\n\n## Check if Odd\n\nThe code loops over each value in the list, checks the condition, and appends to a new list.  \n\nThe code works, but it's lengthy compared to a list comprehension.  \n\nThe approach takes extra time to write and understand.  \n\nLet's solve with a list comprehension:\n\nMuch shorter, and if you understand the syntax, quicker to interpet.\n\nNote the in-place use of an expression.\n\nNow let's discuss the syntax.\n\n# Comprehensions in General\n\nComprehensions provide a concise method for iterating over any list-like object to a new list like object.\n\nThere are comprehensions for each list-like object:\n* List comprehensions\n* Dictionary comprehensions\n* Tuple comprehensions\n* Set comprehensions\n\nComprehensions are essentially very concise `for` loops. They are compact visually, but they also are more efficient than loops.\n\nAll comprehensions have the form:\n\nlistlike_result = `[ expression + context]` \n\nThe type of comprehension is indicated by the use of enclosing pairs, just like anonymous constructors:\n\n* List comprehensions       `[expression + context]`\n* Dictionary comprehensions `{expression + context}`\n* Tuple comprehensions      `(expression + context)`\n* Set comprehensions        `{expression + context}`\n\n\n**Expression** defines what to do with each element in the list. This has the structure of the kind of comprehension. So, dictionary comprehension expressions take the form `k:v` while sets use `v`.\n\n**Context** defines which list elements to select.  The context always consists of an arbitrary number of `for` and `if` statements.\n\n\n\n# More examples\n\n## Stop Word Remover\n\nCreate list of words, and list of stop words.  \nFilter out the stop words (considered not important).\n\nplacing the color-coding on the list comprehension:\n\n[<span style=\"color:blue\"> wd </span> <span style=\"color:red\"> for wd in words </span> if wd not in stop_words]\n\n- the expression is very simple: **wd**. keep the word if meets condition\n- the condition does the work: if the word isn't in list of stop words, keep it\n\n**Side note**: This task can also be done with sets, if you are not concerned with mulitple instances of the same word:\n\n## Select Tokens Containing Units\n\nGiven a list of measurements, retain elements containing mmHg (millimeters of mercury)\n\n*Filtering on two conditions*\n\nThis can be written differently for clarity:\n\n# Dictionary Comprehensions\n\n**Dictionary comprehensions** provide a concise method for iterating over a dictionary to create a new dictionary.\n\nThis is common when data is structured as key-value pairs, and we'd like to filter the dict.\n\nWe build the key-value pairs using `key:model_arch[key]`, where the key indexes into the dict `model_arch`\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":true,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"number-sections":false,"output-file":"M03-03-Comprehensions.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.262","bibliography":["../../refs.bib"],"_quarto-vars":{"version":2,"course_num":"DS 5100","course_title":"Programming for Data Science","academic_term":"Fall 2023","cohort_type":"Online","course_code":"DS5100-2023-08-O","course_allocation":"msds_ds5100","canvas_url":"https://canvas.its.virginia.edu/courses/75059","github_url":"https://github.com/ontoligent/DS5100-2023-08-O","website_url":"https://ontoligent.github.io/DS5100-2023-08-O","survey_form_url":"https://forms.office.com/r/YWaFPXPKz8","request_form_url":"https://forms.office.com/r/7G65N5eppk"},"theme":"cosmo","fig-cap-location":"bottom","reader-mode":false},"extensions":{"book":{"multiFile":true}}}}}