{"title":"M02 Notes","markdown":{"headingText":"M02 Notes","containsRefs":false,"markdown":"\n\n# Review Assignment\n\nSee [M01 Notebook](../M01_GettingStarted/M01_ImportHello.ipynb) for results.\n\n# Concepts\n\n## Data / Code\n\nData vs algorithm (code). How are they related?\n\n## Data types and structures\n\nData types and data structures. What are the differences?\n\nData types are atomic; they don't contain other data types.\n\nA data structure contains data types organized in a certain way.\n\n## Strings\n\nStrings are data types, but internally they are like data structures.\n\nHowever, unlike the data structures considered here, strings can't contain any of the data types specified by Python.\n\nInternally, a string is a sequence of Unicode code points, which are not exposed as data types (as they are in some other languages).\n\n- A code point is a numerical value that maps to a specific character.\n- Unicode is an international standard of code points that map onto the alphabets of many languages.\n\nEach character is an element in an immutable list-like structure.\n\nYou can access it's elements as if it were a tuple of characters:\n\nBut also like a tuple, you can't change its values:\n\nNote that some languages, like Java, have a data type for individual characters, e.g. `A`.\n\n## String indexing\n\nNote that strings can be accessed via indexes, since they are list-like sequences.\n\nOne thing to understand about indexing elements and slices is that slices are always \\\nfrom left to right, even if using negative numbers, which move backwards, as it were.\n\nAlso, every positive number has a corresponding negative number, and these may be \\\nsubstituted freely and using indexes and slices.\n\nThe following example illustrates these points.\n\nThe above string can represented in the following way:\n\n|I| |A|M| |A| |S|T|R|I|N|G|\n|-|-|-|-|-|-|-|-|-|-|-|-|-|\n| 0| 1| 2| 3| 4| 5| 6| 7| 8| 9| 10| 11| 12|\n|-13|-12|-11|-10|-9|-8|-7|-6|-5|-4|-3|-2|-1|\n\nNote that the second and third rows of this table represent two functionally \\\nequivalent ways of accessing elements of the string sequence.\n\nAlso note that positive and negative numbers are subsitutible.\n\n## Mutability\n\nA mutable object is one whose internal value can be changed. \n\nThis property applies to data structures.\n\nTuples are immutable, lists are not.\n\n**Demonstration**\n\nHere, we mutate a list by appending a value to it.\n\nIf we try the same things with a tuple, we get an error.\n\nThis, on the other hand, is not mutation:\n\nWe are just **re-assigning** a new value to the variable. \n\nThe new value just **replaces** the old one.\n\nIn mutation, the same data structure remains in place and its contents are changed.\n\nNote, however, that this works with tuples:\n\nIt looks like mutation, but it's not.\n\nThis is because we are replacing `b` with a new tuple value.\n\n> Notice that we write a single valued tuple with a comma. Why?\n\n**Behavior**\n\n> View the [video for this section](https://canvas.its.virginia.edu/courses/75059/modules/items/851334) on Canvas.\n                                    \nRelatedly, mutable and immutable objects behave differently.\n\nFor example, when you assign a variable to another variable of a \\\nmutable datatype, any changes to the data are reflected by both variables. \n\nThe new variable is just an alias for the old variable. \n\nThis is only true for mutable datatypes. \n\nLets explore how `+` operator behaves differently.\n\nFirst, let's create a function that will allow us\\\nto compare the objects as we modify them.\n\n**List t1**\n\nWe initialize a list and make a copy of it.\\\nNote that the two variables share the same `id`.\n\n**List t2**\n\nNow we add to the copy and note the effects on the original. \\\nThe original value is also changed. \\\nThis is because both variables point to the same object.\n\n**List t3**\n\nNote, however, that if we _don't_ use the unary operator,\\\nthen `a1` becomes a different object! \\\nThis is weird ~~and does not seem to be noticed by the [Python people](https://book.pythontips.com/en/latest/mutation.html)~~.\n\nLutz goes into the difference between the += and the + in [Ch 11 pages 360-363](https://learning.oreilly.com/library/view/learning-python-5th/9781449355722/ch11.html#augmented_assignments).\n\n![image.png](attachment:f0700cf2-cf3f-4155-a28d-383be7d726b2.png)\n\n**List t4**\n\nTry it with a new object copy, to avoid any possible inference between `t2` and `t3`.\n\nWe get the same result.\n\n**Tuple t1**\n\nLet's try this with a tuple.\\\nWe see again that both variables have the same `id`.\n\n**Tuple t2**\n\nHowever, if extend the tuple with the unary operator,\\\n&emsp;`b1` becomes a new object.\\\nNote how this differs from the list behavior.\n\n**Tuple t3**\n\nIf we don't use the unary operator, the same thing happens again.\\\nThe value of `b1` becomes a new object because the variable has been reassigned.\n\nLet's look at another example.\n\nHere is a list:\n\nAnd here is a tuple:\n\n## Comparing floats\n\nLet's do an experiment:\n\nIn the above case, `f1` and `f2` don't hold precisely the same value because of the limitations of representing base-10 fractions in base-2 (binary).\n\nInspecting their values, we find minor differences in the lower significant digits:\n\nTo get around this problem, try using `math.isclose()` instead of `==`:\n\nNote that sometimes floating point comparisons _do_ work:\n\nSee the [Wikipedia](https://en.wikipedia.org/wiki/Floating-point_arithmetic#:~:text=In%20computing%2C%20floating%2Dpoint%20arithmetic,are%20called%20floating%2Dpoint%20numbers.) article on floating point arithmetic to learn more about how this arises. \n\nIt will provide you with insight into how computers actually work as machines that process numbers.\n\n## The word \"scalar\"\n\nSometimes you will see the word \"scalar\" in the literature to refer to certain kinds of values.\n\nScalars are **single values** as opposed to structures or collections of values. \n\n> Strings as data types sometimes behave as scalars and sometimes as sequential structures.\n\n# Summary\n\n**Types**\n| name | type | literal |\n|------|------|---------|\n| `int` | integer | `1` |\n| `str` | string | `\"1\"`, `'1'` |\n| `float` | floating point (real) | `1.` |\n| `complex` | complex | `1j` (imaginary component) |\n| `bool` | boolean | `True` |\n\n**Structures**\n| name | mutable | constructor |\n|------|---------|-------------|\n| `tuple` | no | `()`, `tuple()` |\n| `list` | yes | `[]`, `list()` |\n| `dict` | yes | `{}` with key/value pairs, `dict()`  |\n| `set` | yes | `{}` with single values, `set()` |\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":true,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"number-sections":false,"output-file":"M02-Notes.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.262","bibliography":["../../refs.bib"],"_quarto-vars":{"version":2,"course_num":"DS 5100","course_title":"Programming for Data Science","academic_term":"Fall 2023","cohort_type":"Online","course_code":"DS5100-2023-08-O","course_allocation":"msds_ds5100","canvas_url":"https://canvas.its.virginia.edu/courses/75059","github_url":"https://github.com/ontoligent/DS5100-2023-08-O","website_url":"https://ontoligent.github.io/DS5100-2023-08-O","survey_form_url":"https://forms.office.com/r/YWaFPXPKz8","request_form_url":"https://forms.office.com/r/7G65N5eppk"},"theme":"cosmo","fig-cap-location":"bottom","reader-mode":false},"extensions":{"book":{"multiFile":true}}}}}