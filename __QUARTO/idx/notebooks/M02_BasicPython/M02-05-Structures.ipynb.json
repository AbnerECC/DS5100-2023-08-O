{"title":"NB&colon; Structures","markdown":{"yaml":{"title":"NB&colon; Structures"},"headingText":"Lists","containsRefs":false,"markdown":"\n\nIn contrast to primitive data types, data structures organize types into structures that have certain properties, such as **order**, **mutability**, and **addressing scheme**, e.g. by index.\n\n\nA list is an ordered sequence of items. \n\nEach element of a list is associated with an integer that represents the order in which the element appears.\n\nLists are indexed with **brackets** `[]`. \n\nList elements are accessed by providing their order number in the brackets.\n\nLists are **mutable**, meaning you can modify them after they have been created.\n\nThey can contain mixed types.\n\n## Constructing \n\nThey can be **constructed** in several ways:\n\n## Indexing\n\n**Zero-based indexing**  \n\nPython uses xzero-based indexing, which means for a collection `mylist`\n\n`mylist[0]` references the first element  \n`mylist[1]` references the second element, etc\n\nFor any iterable object of length *N*:  \n`mylist[:n]` will return the first *n* elements from index *0* to *n-1*  \n`mylist[-n:]` will return the last *n* elements from index *N-n* to *N-1*\n\n## Slicing\n\n## Multiply lists by a scalar\n\nA scalar is a single value number.\n\n## Concatenate lists with `+`\n\n## Lists can mix types\n\n**What happens if we multiply a list with strings?**\n\n## Lists can be nested\n\ncannot subset into a float, will break\n\n## Lists can concatenated with `+`\n\n# Dictionaries `dict` \n\nLike a hash table. \n\nHas key-value pairs.\n\nElements are indexed using brackets `[]` (like lists).\n\nBut they are constructed used braces `{}`.\n\nKey names are unique. If you re-use a key, you overwrite its value.\n\nKeys don't have to be strings -- they can be numbers or tuples or expressions that evaluate to one of these.\n\n## Constructing\n\n## Retrieve a value\n\nJust write a key as the *index*.\n\n## Print list of keys, values, or both\n\nUse the `.keys()`, `.values()', or `.items()` methods.\n\nKeys are not sorted. For example, they are not ordered in order in which they were added.\n\n# Tuples\n\nA tuple is like a list but with one big difference: **a tuple is an immutable object!**\n\nYou can't change a tuple once it's created.\n\nA tuple can contain any number of elements of any datatype.\n\nAccessed with brackets `[]` but constructed with parentheses `()`.\n\n## Constructing\n\nCreated with comma-separated values, with or without parenthesis.\n\n\nA single valued tuple must include a comma `,`, e.g.\n\n# Common functions and methods to all sequences\n\n```\nlen()\nin\n+ \n*\n```\n\n## Membership with `in`\n\nReturns a boolean.\n\n# Sets\n\nA `set` is an unordered collection of unique objects.\n\nThey are subject to set operations.\n\nNote the set is deduped\n\nSince sets are unordered, they don't have an index. This will break:\n\n**Check if a value is in the set using `in`**\n\nCombine two sets\n\nThis fails:\n\nThis succeeds:\n\nGet the set intersection\n\n# Ranges\n\nA range is a sequence of integers, from `start` to `stop` by `step`.\n- The `start` point is zero by default.  \n- The `step` is one by default.  \n- The `stop` point is NOT included.  \n\nRanges can be assigned to a variable.\n\nMore often, ranges are used in iterations, which we will cover later.\n\nanother range:\n\n# Collections and `defaultdict`\n\nVery often you will want to build a dictionary from some data source, and add keys as they appear. The default `dict` type in Python, however, requires that the key exists before you can mutate it. The `defaultdict` type in the `collections` module solves this problem. Here's an example.\n\n## Try with `dict`\n\n## Use `try` and `except`\n\n## Or use `.get()`\n\n## Use `collections.defaultdict`\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":true,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"number-sections":false,"output-file":"M02-05-Structures.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.262","bibliography":["../../refs.bib"],"_quarto-vars":{"version":2,"course_num":"DS 5100","course_title":"Programming for Data Science","academic_term":"Fall 2023","cohort_type":"Online","course_code":"DS5100-2023-08-O","course_allocation":"msds_ds5100","canvas_url":"https://canvas.its.virginia.edu/courses/75059","github_url":"https://github.com/ontoligent/DS5100-2023-08-O","website_url":"https://ontoligent.github.io/DS5100-2023-08-O","survey_form_url":"https://forms.office.com/r/YWaFPXPKz8","request_form_url":"https://forms.office.com/r/7G65N5eppk"},"theme":"cosmo","fig-cap-location":"bottom","reader-mode":false,"title":"NB&colon; Structures"},"extensions":{"book":{"multiFile":true}}}}}