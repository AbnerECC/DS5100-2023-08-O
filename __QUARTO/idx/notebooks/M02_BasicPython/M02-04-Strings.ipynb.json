{"title":"NB&colon; Strings","markdown":{"yaml":{"title":"NB&colon; Strings"},"headingText":"Kinds of quotes","containsRefs":false,"markdown":"\n\n\nStrings are signified by quotes. \n\nSingle and double quotes are identical in function.\n\nThey must be \"straight quotes\" though -- cutting and pasting from a Word document with smart quotes won't work.\n\n## Quote prefixes\n\n### `r` strings\n\nPrefixing a string causes escape characters to be uninterpreted.\n\n### `f` strings\n\nPrefixing a string with `f` allows variable interpolation -- inplace evaluation of variables in strings.\n\nThe brackets and characters within them (called format fields)\nare replaced with the passed objects.\n\n# Printing `print()`\n\nPython uses a print function.\n\nPython supports special \"escape characters\" in strings that produce effects when printed. \n\n```\n\\\\     Backslash (\\)\n\\'     Single quote (')\n\\\"     Double quote (\")\n\\n     ASCII Linefeed, aka new line\n```\n\nNote that these are not unique to Python. They are part of almost all languages.\n\nThe print function puts spaces between strings and a newline at the end, but you can change that: \n\n# Comments\n\nComments are lines of code that aren't read by the interpreter.\n\nThey are used to explain blocks of code, or to remove code from execution when debugging.\n\nThese following are multiline strings that can serve as comments:\n\nNote that multiline comments also evaluate as values.\n\n# Run-time User Input\n\n# Some String Functions\n\n## `.lower()`, `.upper()`\n\n## `.split()` \n\nParase a string based on a delimiter, which defaults to whitespace.\n\nNOTE: This does *not* use regular expressions.\n\nThis returns a list.\n\n\n## `.strip()`, `.rstrip()`, `lstrip()` Strip methods\n\nStrip out extra whitespace using strip(), rstrip() and lstrip() functions\n\n`.strip()` removes white space from anywhere\\\n`.rstrip()` only removes white space from the right-hand-side of the string\\\n`.lstrip()` only removes white space from the left-hand-side of the string\n\n## `.replace()`\n\n## `.format()`  \n\nVariable values can be embedding in strings using the `format()` function.  \nPlace {} in the string in order from left to right. followed by `.format(var1, var2, ...`)`\n\nThis breaks, as three variables are required based on number of {}\n\n## `.zfill()`\nBasic usage of the str.zfill() method\n(pads a numeric string on the left with zeros)\nIt understands about plus and minus signs\n\n# Strings are Lists\n\nActually, they are list-like. \n\nHere are some functions applicable to strings because they are lists.\n\n## `len()` Length\n\nThis is built-in length funciton tells us how many characters in the string. \n\nIt also applys to any list-like object, including strings, lists, dicts, sets, and dataframes.\n\n### Indexing\n\nSince strings are sequences in Python, each character of the string has a \nunique position that can be indexed.\n\nIndexes are indicated by suffixed brackets, e.g. `foo[]`\n\n### Slicing\n\nWe can used the colon to 'slice' strings (and lists)\n\nit is NOT possible to reassign elements of a string. Python strings are **immutable**.\n\nAdd strings and handle pathing\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":true,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"number-sections":false,"output-file":"M02-04-Strings.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.262","bibliography":["../../refs.bib"],"_quarto-vars":{"version":2,"course_num":"DS 5100","course_title":"Programming for Data Science","academic_term":"Fall 2023","cohort_type":"Online","course_code":"DS5100-2023-08-O","course_allocation":"msds_ds5100","canvas_url":"https://canvas.its.virginia.edu/courses/75059","github_url":"https://github.com/ontoligent/DS5100-2023-08-O","website_url":"https://ontoligent.github.io/DS5100-2023-08-O","survey_form_url":"https://forms.office.com/r/YWaFPXPKz8","request_form_url":"https://forms.office.com/r/7G65N5eppk"},"theme":"cosmo","fig-cap-location":"bottom","reader-mode":false,"title":"NB&colon; Strings"},"extensions":{"book":{"multiFile":true}}}}}