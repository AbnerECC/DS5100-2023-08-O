{"title":"What is OOP?","markdown":{"headingText":"What is OOP?","containsRefs":false,"markdown":"\n## The Basic Idea\n\nThe usual way that Object-Oriented Programming (OOP) is introduced to students is as a natural way to describe things in the world.\n\nThe story told goes something like this:\n\n**The world consists of a bunch of things.**\n\nThese things may be animate or inanimate, but they have two things in common:\n\n- Attributes: qualities, traits, features\n- Behaviors: ways of interacting with other things\n\nSo, anything from an orange to the economy of France are things.\n\n- The properties of an orange are its color, weight, species, etc.\n- The properties of the economy of France are its GDP, its industrial sectors, its rate of unemployment, etc.\n- The behaviors of an orange are things like being eaten, or rotting. \n- The behaviors of an economy are going into a recession, etc.\n\nThese things are called **objects**.\n\n**All objects that exist are instances of abstract classes.**\n\nEvery object that exists is an instance of an abstract class.\n\n- A specific orange is an instance of the class of Oranges.\n- France's economy is an instance of the class of National Economies.\n\n::: {.callout-note}\nThe nature of these classes raises an important philosophical question, but we will not address this here.\n::: \n\n**Classes are organized into trees.**\n\nClasses are organized into tree-like structures. \n\nSpecific classes inherit the attributes and behaviors of their parent and ancestors, although they can override these as well.\n\nSo, an organge might have this lineage:\n\n`Plant > Magnoliophyta > Magnoliopsida > Rosidae > Sapindales > Rutaceae > Citrus > Valencia Orange`\n\n::: {.callout-note}\nThe idea that the world is organized into a hierarchy of things descending from some primary substance is ancient. Here is an example from the European Middle Ages:\n:::\n\n![The Poryphyrian Tree](../media/Porphyrian_Tree.png)\n\n## Relationship to Coding\n\nOOP is based on the analogy that code can be organized in this way. \n\nThis is because software is often about the world – we write software to model things in the world. \n\n- For example, if I wanted to write code simulate the traffic pattern of a city, I might start by creating a class called Car.\n- This Car would have properties, such as its make and model, but also behaviors like driving.\n- Then, in simulation program, I would create a bunch of Car instances and have them do things like drive on streets, etc.\n\n## Another Way to Look at It\n\nNow, although this way of looking at OOP is somewhat intuitive, it can be misleading.\n\nIt is great for understanding the data structure that OOP uses.\n\n- A tree-like organization of classes\n- Classes with attributes and behaviors\n\nBut the OO pattern is not always used to model things in the world.\n\nSometimes is just a good way to organize code – OOP is a data structure for the data that is code.\n\nIn other words, just as we say that dimension can refer to the world or to the structure of data, so too can an object. \n\nWe use OOP to provide structure to our code, regardless of whether it paints an accurate picture of the world.\n\n## The Trinity \nOOP theory states that classes exhibit three fundamental properties that make them powerful:\n\n- Encapsulation\n- Inheritance\n- Polymorphism\n\n**Encapsulation** means that objects are self-contained. They have their own scope, data, and logic. Ideally, they can be deployed in any context and be shielded from external states. \n\n- Objects are meant to be black boxes to users: they should only be interacted with via the methods and attributes provided.\n- Nothing else should influence the state of the object except what it contains and what is passed to it.\n\n**Inheritance** means that classes can be subclasses of other classes and thereby inherit their ancestor attributes and methods. \n- Some programming languages allow only single inheritance – classes can have one parent.\n- Python supports multiple inheritance, but this can be complicated to use.\n\n**Polymorphism** means that methods can perform different behaviors based on the arguments they are passed.\n- That is, a function can be defined more than once in a class, as long as it each has a unique **signature**.\n- A signature is the particular pattern of arguments (parameters) a method has.\n\nToday, we are only going to focus on **encapsulation** ...\n\n- Once upon a time, there was a movement to implement only this concept.\n- Microsoft, for example, developed a component-based approach to programming, where components are encapsulated unites of code without the complexity of inheritance.\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":true,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"number-sections":false,"output-file":"what-is-oop.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.262","bibliography":["../refs.bib"],"_quarto-vars":{"version":2,"course_num":"DS 5100","course_title":"Programming for Data Science","academic_term":"Fall 2023","cohort_type":"Online","course_code":"DS5100-2023-08-O","course_allocation":"msds_ds5100","canvas_url":"https://canvas.its.virginia.edu/courses/75059","github_url":"https://github.com/ontoligent/DS5100-2023-08-O","website_url":"https://ontoligent.github.io/DS5100-2023-08-O","survey_form_url":"https://forms.office.com/r/YWaFPXPKz8","request_form_url":"https://forms.office.com/r/7G65N5eppk"},"theme":"cosmo","fig-cap-location":"bottom","reader-mode":false},"extensions":{"book":{"multiFile":true}}}}}